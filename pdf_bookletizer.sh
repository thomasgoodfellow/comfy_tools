#!/bin/bash
# Imposition of an A4 PDF document to generate a A5 booklet
# Depends on package gs
# Parameter: $1 - full path of original document
# Generates a new PDF in the same directory with "_book" appended to filename
# Needs a blank PDF (called blank.pdf) in the same directory as the script
# (crudely generated by printing a 1x1 white bitmap from GIMP)

# Because GS only supports a single range of pages it becomes quadratically slow
# on large files (reparses the input every time), hence above a certain page count
# we switch to splitting the original into separate (temp) page files and then
# merging those into the booklet
BIG_PDF_THRESHOLD=60
SPLIT_STEM=

# Arg: page number
# Result to STDOUT: fragment of GS commandline to select just that page from the correct doc
function GSPage() 
{
    local DOC=$DOC_SRC
    local PAGE=$1
    local COUNT=$2
    if test $PAGE -gt $NUM_PAGES ; then
        echo -n "-dFirstPage=1 -dLastPage=1 $SCRIPTDIR/blank.pdf"
    elif [[ -z $SPLIT_STEM ]] ; then
        let LASTPAGE=PAGE+COUNT-1
        echo -n "-dFirstPage=$PAGE -dLastPage=$LASTPAGE $DOC"
    else
        # need to unroll the range
        local N
        for (( N=1; N<=COUNT; N++ ))
        do
            echo -n "${SPLIT_STEM}_$PAGE "
            let PAGE=PAGE+1
        done
    fi
} 
    
SCRIPTDIR="$(dirname "$0")"
DOC_ORIGINAL="$1"
if [[ -z \"$DOC_ORIGINAL\" ]] ; then echo "Parameter: PDF file to generate booklet version (_book appended)" ; exit 1 ; fi

# if file is remote then use a copy: GS seems to seek a lot
DOC_SRC=$DOC_ORIGINAL
MOUNTPT=$(stat -c %m "$DOC_ORIGINAL")
if [[ $MOUNTPT != "/" ]] ; then
    LOCAL_COPY=$( mktemp )
    cp "$DOC_ORIGINAL" $LOCAL_COPY
    if [[ $? -ne 0 ]] ; then LOCAL_COPY= ; else DOC_SRC=$LOCAL_COPY; fi
fi

# number of pages of original PDF
NUM_PAGES=`pdfinfo "$DOC_SRC" | grep Pages | sed 's/^Pages:[ ]*\([0-9]*\).*$/\1/g'`
# how many blank pages to add
NUM_BLANKS=$(((4 - $NUM_PAGES % 4) % 4))

if test $NUM_PAGES -ge $BIG_PDF_THRESHOLD ; then 
    # split original into page files in temp location
    SPLIT_STEM=$( mktemp )
    GSCMD="gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="${SPLIT_STEM}_%d" "$DOC_SRC""
    echo "Exec: $GSCMD"
    $(time $GSCMD)
    echo "Now re-merging"
fi

# Page layout is as quads: [n 1 2 n-1] [n-2 3 4 n-3] 
LOWER=1
UPPER=$(($NUM_PAGES + $NUM_BLANKS))
NUM_QUADS=$(($UPPER / 4))
GSCMD="gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=${DOC_ORIGINAL%.*}_book.pdf"
for(( q = 1; q <= $NUM_QUADS; ++q )) 
do
    F1=$( GSPage $UPPER 1)
    # runs of two, or at the centre even three, pages can be combined
    if test $(($LOWER + 2)) -eq $((UPPER - 1)) ; then
        F2=$( GSPage $LOWER 3)
        F3=
    else
        F2=$( GSPage $LOWER 2)
        F3=$( GSPage $(($UPPER - 1)) 1)
    fi
    GSCMD="$GSCMD $F1 $F2 $F3"
    UPPER=$(($UPPER - 2))
    LOWER=$(($LOWER + 2))
done

echo "Exec: $GSCMD"
`time $GSCMD`
echo "!! Remember to set appropriate layout, e.g. double-sided, short-edge-flip, 2 pages per side !!"
# cleanup any temp files
if [[ $SPLIT_STEM ]] ; then rm ${SPLIT_STEM}* ; fi
if [[ $LOCAL_COPY ]] ; then rm $LOCAL_COPY ; fi
